Trust-Based Revision for Expressive Web Syndication Jennifer Golbeck1 and Christian Halaschek-Wiener2 1College of Information Studies 2Department of Computer Science Universityof Maryland, CollegePark CollegePark, Maryland 20742 {golbeck,halasche}@cs.umd.edu Abstract Interest in web-based syndication systems has been growing as information streams onto the web at an increasing rate.Technologies,likethe standard SemanticWeb languagesRDFandOWL,makeit possibleto createexpressive representationsofthe contentof publicationsand subscriptionsinasyndicationframework.Because these languages are based in description logics, this representation allows the application to reasoning to makemore precise matching of user interests with published information. Achallenge to this approach is that the consistencyof the underlying knowledge base must be maintained for these techniques to work. With the frequent addition of information from new publications, it is likely that inconsistencies will arise. There are many potential mechanisms for choosing which inconsistent information to discard from the KB to regain consistency; in the case of news syndication, we arguekeeping the most trusted information is important for generating the most valuable matches. Thus, in this article, we present algorithms for belief-base revision, and specifically look at the user’s trust in the information sourcesasa metricfor decidingwhattokeepintheKBandwhatto remove. Introduction The interest in web-based syndication systems has been growing as information streams onto thewebatan increasing rate. Ina typicalsyndication framework,apublisher posts feeds on the web and registers those feeds with a syndication broker. Users, or consumers of the information, register their subscriptions with the broker, who matches the subscriptions to newly published information. Atthe same time, technologiesfor sharing informationina machine processablewayhave matured on the web. This has increased the power available to publishers to describe their content, to consumers to describe their subscriptions, and to brokers for matching content to subscriptions. Specifically, there has beena transition fromkeyword based approaches [49] to attribute-value pairs (e.g., [1]) and more recently toXML [3, 13]. Given the limited knowledge modeling expressivity of XML (and XML Schema) there has been interest in using RDF for syndication purposes [57, 9]. RDF has even been adopted as the standard representation format of RSS 1.01. These technologies are still quite limited in their expressive power from a modeling perspective,andin their reasoning capabilities. SemanticWeb languagesbuiltontopofRDF, particularly theWeb Ontology Language(OWL), provide much greaterexpressivity for describing contentand subscriptions.That,inturn,allowsfinergrained controloverqueriesand content matching [56]. When content and subscriptions are describedinOWL, the matching task canbe handled usingOWL reasoners. While the benefitsofa moreexpressive language 1RSS 1.0 Specification: http://web.resource.org/rss/1.0/spec L.J.of the IGPL,Vol.0No.0, pp. 1–200000 1 cOxford University Press 2 Trust-BasedRevision for ExpressiveWeb Syndication are clear, there are major challenges to implementing such a system. In particular, reasoning inOWL is difficult. Even when restricted to OWL-DL, the fragment of OWL that aligns with well studied description logics (DL), the time required to match subscriptions and content is prohibitive. Since syndication frameworks make frequent incremental updates to the underlying knowledge base, it is necessary that the reasoner can quickly incorporate these changes.In earlierwork[28,30],we presentedaframeworkforusingOWLforrepresenting published content and subscriptions and introduced several optimizations toOWL-DL reasoners to handle the frequent incremental updates. That work is described in more detail in section 2. There remainunsolved problems that area barrier to usingexpressive languages for syndication. As new information is published, it is likely that it will contradict information already in the knowledge base; sources may provide conflicting reports and old information becomes obsolete. Our current techniques can detect these logical inconsistencies,buta method for resolving them is necessary. This requires identifying the source of the inconsistency and deciding what information tokeep and what to revise or throw out to regain consistency. The na¨ıve solution would ignore any new statement that makes the knowledge base inconsistent, howeverthisisclearlynotagood solutionfornewsupdates.Wearguethatthechoiceshould be made based on trust in a statement, which is a function of the age of the statement and how much trust the broker has in the source of that statement. Thus,in this paper we presenta technique for revisingOWL-DL knowledge bases using trust. We begin with a discussion of expressive web syndication and the optimizations that wehavedevelopedtoprovidethe necessary reasoningefficiency.We then discuss algorithms for belief-base revision and present an belief-base semi-revision algorithm for OWL-DL. The semi-revision operator defined uses an incision function, which intuitively selects the assertions from the KB that must be retracted in order to regain consistency. Finally, we present an incision function that uses the notion of trust to select which statements to remove such that consistencyis maintained. 2 Expressive Syndication on the Web Increasingly,peopleandbusinessesare recognizingthe potential benefitsof utilizingthevast amounts of frequently updated data available on the web. Web syndication systems offer a straightforwardwaytodiscoverandaggregate content,andto connect userswiththe information they need. As interest has grown, there has been a move to more expressive syndication frameworks that offer more precise matches between publications and subscriptions. At the same time, SemanticWeb technologies have matured and are better supported. The natural steptoprovide increasinglyexpressive syndicationisto merge thesetwo ideas, usingOWL to describe content and subscriptions, and reasoners to match the two. To demonstrate the increasedexpressivityof anOWL-based syndication approach, consider the following example related to the financial domain. Assume that a stock trader is interested in information contained in news articles (or collections of articles) that discuss news about companies that will make their stocks volatile (i.e., theybecome riskyinvestments). In particular, assume that the trader is interested in any RiskyCompany which the trader defines to bea company that has a product which causes an infection or allergic reaction. Using an XML-based approach, syndication brokers can provide an XML schema which contains an element RiskyCompany and such companies can be declared to be this type of element. However, more complex logical definitions and automatic classification of objects cannot be Trust-BasedRevision for ExpressiveWeb Syndication supported; therefore an XML-based approach cannot accommodate the previous example. If we consider an RDF-based approach, then a syndication broker can model the financial domain using RDF Schema. Using such an approach slightly more complex subscription matches can be obtained, as one can logically infer that a companyis a RiskyCompany (e.g., based on subclass relationships). However, in an RDF-based approach, complex logical definitions, such as the previously mentioned RiskyCompany, are not definable. In contrast, in an OWL-based approach such expressivity is easily provided. For example, theRiskyCompany is definedinTable1. :RiskyCompany a owl:Class; owl:intersectionOf ( [ a owl:Restriction; owl:onProperty :hasProduct; owl:someValuesFrom :AdverseEffectProduct] :Company ). :AdverseEffectProduct a owl:Class; owl:intersectionOf ( [ a owl:Restriction; owl:onProperty :causes; owl:someValuesFrom [owl:unionOf(:Infection :AllergicReaction)]] :Product ). :causes a owl:ObjectProperty. :onRecommendation a owl:ObjectProperty. TABLe 1: Illustration of expressivity in OWL-based syndication (given in turtle syntax for clarity). Whilethepowerofthis increasedexpressivityis clear,the inherentdifficulty of DL reasoning causes scalability issues [56, 41, 27]. In domains such as financial news feeds, updates come frequently and theymust be reasoned over and delivered in near real-time if they are to be useful for tasks like stock trading. However, the static nature of existing DL reasoning techniques requires reasoning on the KB to be performed from scratch for each update: the consistencyof the KB must be ensured, queries must be re-evlautated, etc. This negatively impactstheperformance resultsofexisting DL-basedapplications which are analogousto syndication systems, as performance times are in the tens of seconds [56, 41, 27]. To address these issues, we have developed several techniques and optimizations that lead to a significant improvement in performance of DL-reasoning. In this section, we briefly describe those techniques. Full details are available in[29, 28, 30]. First, we discuss the manner in which new publications are integrated into the syndication broker’s knowledge base. 2.1 Syntactic Updates Before introducing the form of updates that are assumed in this work, we briefly introduce some terminology and notation. Specifically, DL KBs are comprised of three main components, namely a TBox, RBox, and ABox. The TBox contains intensional knowledge (axioms about concepts)in the formofa terminology. The axiomsin the TBox canbebuilt using the a variety of concept constructors provided in the specific DL, as well as concept inclusion axioms(v), which state inclusion relations betweenDL concepts.Forexample, onecan state that anytechnology companyis a companyvia the following axiom: TechnologyCompany • Company. The RBox contains intentional knowledge about the roles in the knowledge base. For example, one can state that any two individuals that satisfy the hasCEO role, 4 Trust-BasedRevision for ExpressiveWeb Syndication also satisfy the hasEmployee role by the following axiom: hasCEO • hasEmployee, where hasCEO and hasEmployee are roles. In contrast, the ABox contains extensional knowledge thatis specifictotheindividualsinthe domainof discourse. AssertionsintheABoxtakethe form of concept assertions (e.g., Company(BauschAndLomb)), role assertions (e.g., hasProduct(BauschAndLomb, Renu)),and equality(Ford= FordMotorCompnay)and inequality (e.g., CitiGroup • CapitalCityBankGroup)assertions. In our earlier work, we assume that a publication is represented as a set of ABox assertions [28, 30]. Therefore, when a new publication is received, the ABox assertions must be integrated into the broker’s KB. Further, we adopt a specific mechanism for performing this task, which we refer to as syntactic updates. Intuitively, this is simply an update in which all new assertions are directly added (or removed) to the asserted (base) axioms; thus, the only changes that occur are thoseexplicitly statedinthe update.Formally, this updateis described as follows: DEFINITIOn 2.1 Let Abe the ABox of KB K. Then under syntactic updates,updatingK with an ABox addition (resp. deletion) , written as K + • (resp. K • ), results in an updated set of ABox axioms A• such that A• = A• • (resp. A• = A\ ). It is possible that after syntactic updates the KB may be inconsistent. The revision techniqueswe introduceinthis paperwill choose which statementsto discardand whichtokeep in order to regain consistency. That this type of ABox update isdifferent when compared to related work in update semantics [43] andbelief revision [16] for DLs. Syntactic updates has been adopted as these works have unfortunately found negative results when trying to apply leading theories for handling updates in DL KBs, as they are either not representable inOWL DL [43] or they cannot satisfy the requirements imposed by the theory [16]. Further, this type of update is clearly applicable to syndication applications. 2.2 Incremental Consistency Checking When a new publication is received, the consistencyof the KB must be checked after it has been expanded with an update. When the underlying KB is very large, this process can be require substantial computation time, even when the updates are trivial; this is related to the inherent complexity of DL reasoning. There has, however, been recent work on incremental consistencychecking of the description logics SHIQ and SHOQ (which correspond to large portionsofOWL-DL) under syntactic ABox updates [29, 30]. More specifically,[29] presents an approach for incrementally updating tableau completion graphs under syntactic ABox updates, thereforeprovidinga mechanismtoincrementally determine if the updated KB is consistent. DL tableau-based algorithms decide the consistencyof an ABox Awith respecttoaKB K bytryingto constructan abstractionofa common model for Aand K,calledacompletion graph. The update algorithm adds new(resp. removes existing for deletions) components (nodes, edges, and/or labels) induced by the update to a completion graph; after this, standard tableau completion rules are re-fired to ensure that the model is complete. Therefore, the previous completion graph is updated such that if a modelexists (i.e, theKBis consistent after theupdate)anewcomplete and clash-free completion graph will be found. In [29, 30], we observed that the approach demonstrated orders of magnitude performance improvement and performs in real time for a variety of realistic ontologies. Trust-BasedRevision for ExpressiveWeb Syndication 2.3 Continuous Query Answering After guaranteeing the consistency of the knowledge base after updates, the subscriptions registered with the broker must be evaluated. Traditionally, this would require reasoning from scratch over all instances in the KB. However, two observations provide insight into how this reasoning can be optimized. First, by monotonicity, when an addition is made to the KB, the query answering reduces to determining any new bindings that are entailed. When there are deletions from the KB, the query answering reduces to guaranteeing that all previous bindings are still entailed. Here, we describe our approach for efficient continuous query answering. Full details aregivenin [28, 30]. The first step is to localize the effectsof an update. Akeyinsightis demonstratedif we consider a simple query such as hxi• Company(x). Intuitively, in the event an update is an addition, we would only like to consider affected namedindividuals not previously bound to x as a potential answers; in contrast if the update is a deletion, only individuals previously bound to x that were affected by the update need to be re-checked. The individuals affected are those which, in some model, the update causes them to instantiate a concept or role filler (the reverse holds for deletions). The task of localizing the affected individuals under an update can then be reduced to updating tableau completion graphs. When queries contain complex patterns, such as role restrictions, it is not enough to consider only directly affected individuals. An unaffected individualconnected by a role to an affectedindividualmayalsobea candidate answer. Therefore,wealso considerthe structure ofthe query when choosingindividuals. Thekeyinsightis thatfora querytohavean answer afteran update,at leastoneindividualboundtothe querymustbeaffected by the update. In [28, 30], we show that this approach leads to a speedup of several orders of magnitude. 3 Belief Base Revision The techniques describedin section2providethe speedups necessaryto implementawebsyndication framework usingOWL. However, theydo not address how to handle inconsistencies that arise in the KB from updates. In this section, we describe belief base revision and how it is generally applicable for resolving inconsistencies after updates. Belief revision is theprocess of changing beliefs after new information is received. The most influential workin belief revisionis theAGM model [2],in which the authors define three main change operations on belief states which are represented by logically closed sets of statements (referred to as belief sets). The three operations of change are expansion (expanding a belief set with a new belief with no guarantee of consistencyafter the operation), contraction (retractinga belief) and revision (expansion with consistencyafter the operation). Additionally, the authors define a set of postulates for both contraction and revision, which specify what properties a contraction/revision operator must meet in order to be rational. Expansion is analogous to the manner in which addition updates are handled under syntactic updates. The basic structureof beliefs assumedby theAGM modelisa belief set, which is a deductively closed (and hence in general infinite) set of formulae. Due to the difficulty of computing with belief sets as well as representational issues, there has been substantial work on using belief bases as an alternative structure [19, 31, 45, 46]. Belief bases are not closed under logical consequence and are usually interpreted as basic beliefs from which additional beliefs(the beliefset)canbederived.In[19,32,35]theAGMchange operatorsare defined 6 Trust-BasedRevision for ExpressiveWeb Syndication in terms of belief bases. Additionally,[34] defines semi-revision,whichdiffers with the belief base revision model in that the added belief may or may not be accepted (discussed further in Section 3.1). We address the application of semi-revision to finiteOWL-DL belief bases. We choose to focus on belief bases because it has previously been shown thatOWL-DL is notAGMcompliant for contraction [18, 17, 16]. We extend prior work on belief base revision for propositional logic [58], which allows us to define an algorithm for belief base semi-revision in the DL SHOIN (which corresponds toOWL-DL). 3.1 Belief Base Revision Fundamentals Belief bases are sets of formulae which are not closed under logical consequence and are usually interpreted as basic beliefs from which additional beliefs (the belief set) can be derived. [33] introduces a construction for contraction operators for belief bases called kernel contraction. The general idea behind this operator is that if at least one element from each -kernel (which is a minimal subset of a belief base that implies )is removed from the belief base, then the base will no longer imply . [33] formally defines thekernel operator as follows: DEFINITIOn 3.1 [33] The kernel operation• is defined such that for anyset Bof formulae and anyformula , X • B• • iff: 1. X • B 2. X |= , and 3. for all Y, if Y • X, Y 6|= • B• • isa referredtoasakernelset,andits elementsare referredtoas -kernels. Note thatingeneral, there are arbitrarily many waysto resolve inconsistencies between new information and our current knowledge. For example, if we hold the beliefs that (i) Every • is a • and (ii) w isa ', and we revise our knowledge with (iii) w is not a  , we arefaced with an option: we could either retract (i) or retract (ii), therefore a choice must be made. An incision function, defined below (originally defined in [33]), determines our choice in such cases; that is it selects the formula to be removed from every -kernel when we contract . DEFINITIOn 3.2 [33] An incision function forBisa function • such that for anyformula : S1. (B• )• (B• ), and 2. If X • • and X • B• , then X• (B• )• • Kernel semi-revisionis then defined as follows [34]: DEFINITIOn 3.3 [34] The kernel semi-revision operatorfor Bbased on an incision function • is denoted?• and defined such that for all statements : B?• = B[{}\ ((B[{})• ?) Trust-BasedRevision for ExpressiveWeb Syndication 7 This can be thought of as a two-step process: we first add • to B, and second, remove inconsistencies in Bif there are any. The name “semi-revision” comes from thefact that in the revision process, the formula • that we revise our knowledge with may not be accepted. In other words, • might be removed as part of the second step. [34] goes on to define the following postulates that must be satisfied for anyoperator to be consideredakernel semi-revision operator. PROPOSITIOn 3.4 [34]An operator?isakernel semi-revision operatorif and onlyif for all set Bof statements it satisfies the following postulates: 1. • • Cn(B?)(consistency) 2. B?• • B[{} (inclusion) 3. If • • B\ B?, then there is some B0• B[{} such that • • Cn(B0)and?• Cn(B0[{}) (core-retainment) 4.(B+ )?• = B?• (pre-expansion) 5. If , , then B?• = B?• (internal exchange) 3.2 JustificationsinOWL-DL Previously, [4] introduced axiom pinpointing for localizing the set of axioms responsible for inconsistencies in DL knowledge bases for the purpose of computing all extension of default theories. Recently, [36]extended thiswork for the purposeof debugging and repairingOWL ontologies; in [36] the tableau algorithm is slightly modified to maintain the justifications of entailments. Given this work it is possible to find the justifications for arbitrary entailments inOWL-DL knowledge bases. [36] formally definesa justification as follows: DEFINITIOn 3.5 [36] Let K |= • where • is a statement. Afragment K0• K is a justification for • in K if K0|= , and K0• 6|= • for every K0• • K• . [36] also provides an algorithm for finding all justifications using axiom tracing and Reiter’s HittingSetTree (HST) algorithm[53](a similar approachis usedin[58]for propositional calculus).The intuition behindthe usageoftheHST reliesonthefactthat,in orderto remove an inconsistencyfrom a KB, one needs to remove from KB at least one axiom from each justification for that inconsistency. The approach starts by adding the negation of • and finds an initial justification (subset of K)using axiom tracing [36].Following this,ahitting set tree is initialized with the initial justification as its root; then it selects an arbitrary axiom (call it i)in the root and generates a new node with an incoming edge whose label corresponds to the removed axiom. The algorithm then tests for consistencywith respect to the K \{i}. If it is inconsistent, then we obtain another justification for • w.r.t K \{i}. The algorithm repeats this process, namely removing an axiom, adding a node, checking consistencyand performing axiom tracing until the consistencytest turns positive. Due to space limitation, further details areomittedhere;howevertheycanbefoundin[36].Wefollow[36]in denotingthesetofall justifications for • in a SHOIN knowledge base K with JUST(, K). 8 Trust-BasedRevision for ExpressiveWeb Syndication 3.3 Belief BaseRevisioninOWL-DL As mentioned ealier,[58] presentsanalgorithmtokernel semi-revisionusing Reiter’sconsistencybased diagnosis and minimal hitting sets algorithm [53]. The author uses Reiter’s algorithm to compute the minimal set of justifications for the inconsistencyin the belief base. Since the state of the art DL reasoners are tableau-based, an analogous approach is needed for computing all minimal justifications for some entailment in anOWL-DL knowledge base. Here we apply the approach presented in [36] to achieve this task. More specifically, we use the approach of [36] to compute the -kernels (introduced in [33]) of anOWL-DL knowledge base.Withthisability,the resultsof[33]onrevising beliefbaseseasilyfollowforOWL-DL. SHere, we show that JUST(, K)= (K • ). PROPOSITIOn 3.6 SFor anySHOIN knowledge base K and belief , JUST(, K)= (K • ). PROOF. By definition, JUST(, K)contains all justifications forK |= . It suffices to show that criteria1,2, and3from Definition 3.1 are satisfied. Let j• JUST(, K). By definition, j• K, thereby satisfying criteria 1. Further, by definition j|= ;thus criteria2is satisfied. Finally, since justifications are minimal, we obtain condition 3, namely j0• j, j• 6|= . Thus, JUST(, K)isakernel operator forSHOIN KBs. By definition, JUST(, K)contains all justifications for K |= . We can easily see that this set satisfies criteria1,2, and3from Definition 3.1. Let j• JUST(, K). By definition, j• K, thereby satisfying criteria 1. Since jjustifies , wehave j|= • thereby satisfying 2. Finally, since justifications are minimal, we obtain condition 3, namely j0• j, j• 6|= . Thus, JUST(, K)isakernel operator forSHOIN knowledge bases. Next we define the semi-revision operator. DEFINITIOn 3.7 Given a knowledge base K and formula , we define the operator?• such that: K?• = (K [{})\ (JUST(?, K [{})) It follows from this definition and our previous observation that ?• is a kernel semirevision operator.We obtain the following easy consequence: PROPOSITIOn 3.8 ?• satisfies thekernel semi-revisionpostulates. 4 Resolving Inconsistencies Using Trust Having shown that belief base revision is an effective and appropriate strategy for resolving inconsistencies inOWL-DL knowledge bases, the final step is to define an appropriate incision function. For the kinds of applications that we envision relying on expressive web syndication, such as traders processing financial news, the technical details of the reasoner are hidden and irrelevant; the users simply want the best information available. When a contradiction arises,itis important thatthe inconsistencybe resolvedinaway thatkeepsthe best, most trusted information in the knowledge base. If we know the source for each statement(i.e. the publisher), then we can use trust in the source to reflect how much we trust the statements theyprovide. The link between trust in a source and the statements madeby that sourceis intuitive.Wehave showninpreviouswork Trust-BasedRevision for ExpressiveWeb Syndication 9 thatusing trustinasourceto reflect trustinthe informationitprovidesiseffective for sorting information [20], aggregating numeric data[21], and prioritizing rulesin default logics [37]. Here we extend this line of work to rank statements in our knowledge base. In this section, we introduce the concept of trust as it applies to information on the web. In particular, we propose an incision function that chooses statements based on the trustworthiness of their sources and how long the statements have been in the KB. Based on this, we present a semi-revision operator and an analysis of the efficiencyof this approach. 4.1 Defining and UsingTrust Inthis application, there aretwo typesof trust. First,wehave trustin informationproviders. Thesewouldbethemedia outletsandindividualswhoare publishingtheircontenttotheweb. Secondly, we have trust in individual statements in the KB. Certainly, the trust we have in the source of a statement will influence the trust we have in the statement itself. Time also impacts trustin statements; an oldfact,even fromthe most trusted source, may still become obsolete. Thus, over time the trust in a statement will degrade, eventually allowing more up todate statementsintotheKB.Webeginby outliningthe sociological foundationsof trustto show its applicability to this problem, and then introduce a function for determining trust in statements. 4.1.1 Trust in Sources [12] contains a frequently referenced definition of trust. He states that trusting behavior occurs when a person (say Alice) encounters a situation where she perceives an ambiguous path. The result of following the path can be good or bad, and the occurrence of the good or bad result is contingent on the action of another person (say Bob). Furthermore, the negative impact of the bad result is greater than the positive impact of the good result. This further motivates Alice to make the correct choice. If Alice chooses to go down the path, she has made a trusting choice. She trusts that Bob will take the steps necessary to ensure the good outcome. The requirement that the bad outcome must have greater negative implications than the good outcome has positive implicationshas been counteredin otherwork [23], which does not always require disparity. [55] presents and justifies a simple, general definition of trust similar to that of Deutsch: “Trustisabetaboutthefuture contingentactionsof others.”Therearetwomaincomponents of this definition: belief and commitment. First, a person believes that the trusted person will act in a certain way. The belief alone, however, is not enough to say there is trust. Trust occurs when that belief is used as the foundation for making a commitment to a particular action. These twocomponents are also present in the core of Deutsch’sdefinition: we commit to take the ambiguous path if we believe that the trusted person will take the action that will produce the good outcome. Taking the main social aspects of the definitions above, we propose the following definition for our use: trust in a source is a commitment to an action based on a belief that the source’s future actions will leadtoagood outcome. Ourcommitmentistoinclude information froma trusted source over that from an untrusted source in the knowledge base, based on the belief that the source will provide information that will improve the accuracy of our knowledge base. Intuitively, this social definition of trust parallels the way people think about trusting information sources. 10 Trust-BasedRevision for ExpressiveWeb Syndication Of course, this requires that we know how much to trust the sources. In our syndication framework, the broker is responsible for reasoning and must maintain a trust value for each source. In the news domain where major media outlets are involved, it is likely that the number of sources is small enough that a broker can manually decide how much each should be trusted. In other applications, for example, when posts from blogs are being considered, thereare potentially thousandsof sources.Inthese situations,abrokercanrelyonalgorithms that compute trust automatically. In our previous work we have developed algorithms for computing trust through social networks [20, 38], or through similarity measures [61, 22]. Either of these approaches could be used with relatively little bootstrapping by the broker and produce quite accurate results. 4.1.2 Trust in Statements Assuming we know the source of eachstatement, the trust we have in that source is a good measureofhowmuch trustwehaveinthe statementsassertedbythat source.Forexample,a person who trusts traditional news sources will trust news if it comes from Dow Jones more than if it comes from Bob’s Financial News Blog. Note, however, that a broker can make its own trust ratings, and could decide that non-traditional sources may be more trustworthy than major media outlets. However,for news syndication,a straightforward rankingby trust does not fully capture the complexity of the situation. In particular, since the state of the world is always changing, statements from a highly trusted source will still become obsolete over time. Time is an important component of trust in frequently updated information systems. Thus, trust in a statement must be a function of both the recencyof the statement and the trust in its source. For a statement , let source• be the user defined trust in the source of • and • be a measureof the recencyofa statement.Trustin , , is determined by a combination of the trustinits sourceandit recency. Higher trustinthe sourceora more recent statementwillbe more trusted. This is formally defined in Definition 4.1; note that the notation source• and source0• denote different sources of , whereas • and 0• denotes publications of • with different measuresof recency(i.e., thegreater , the longer the information has existed). DEFINITIOn 4.1 Trustin , ,isgivenbya function • such that: 1. • = (source, ) 2. (source, )<(source0, )ifsource• <source0• 3. (source, )<(source,0)if0• <• 4. if (source, )<(source, )then(source, • + i)<(source, • + i) Condition4requires that • degrades • linearly. Consider the case where either • or • must be removed to regain consistencyin the knowledge base. Without condition 4, it could be the case that • <• at time t1, and thus • wouldbe removed from the knowledge base,but at time t2, • >• andwewould prefertohavekept • over . Condition4 ensures that our choice at time t1 remains the same at all times t1+i. The exact balance between recency and trust in the source will vary from one domain to another. We discuss methods for optimizing • in section 8. In any optimization, • is a straightforward combination of variables, running in O(1) time, and so we will simply use the • variable whenever • must be computed. Trust-BasedRevision for ExpressiveWeb Syndication 4.2 AKernel Semi-Revision Operator usingTrust In this section, we formally defineakernel semi-revision operator witha trust-based incision function. First, the notion of a trust-basedselection function is defined. DEFINITIOn 4.2 Definea trust-based selection function • asanyfunction mappingasetof SHOIN assertions into an assertion , such that for anyset Xof SHOIN assertions: 1. If X • • then • • X 2.For each • • X, • ≤ • Intuitively, the selection function returns (one of) the least trusted assertion. Given this, a trust-based incision function is defined in Definition 4.3. DEFINITIOn 4.3 Given KB K,a trust incision function • is anyfunction mapping a set of sets of assertions into a set of assertions, such that for anyset S of sets of assertions: S1. (S)• S 2. If X • • and X • S then X• (S)• • 3. If for all X • S, X• K • ;, then (S)• K, and 4.For each X• S, (X)• (S) 5. (S)is the smallest set satisfying conditions 1–4 It is a direct consequence of the definition that the trust-based incision function satisfies the conditionofa general incision function definedin Definition3.2.In Algorithm1,wegive the algorithm for . Algorithm 1 Incision(S) Input: S: Setofkernels Output: R: Set of formulae to discard 1: R • 2: for all X• S do 3: discard • null 4: for all x • Xdo 5: if x <discard then 6: discard = x 7: end if 8: end for 9: R• R[{discard}10: end for 11: return R In the worst case the incision function • must lookat each statementin eachkernel once, and perform several constant-time operations on it. Therefore, the incision function does not increase the complexity of the belief revision process. 12 Trust-BasedRevision for ExpressiveWeb Syndication Clearly there canbe situationsin whichthe intersectionoftwokernels A, Bis non-empty. In this case, it could be that assertion • • A• Band • is the least trustworthyassertion in A, however not in B. Clearly • will be removed from A, as it is necessary to regain consistency; similarly the least-trusted assertion in Bwill be retracted as well. This demonstrates that the trust-based incision function is not necessarily a minimal-incision function, as it could be possible to retract a smaller set of assertions and still regain consistency. However, this could easilybetakeninto accountbya slight modificationof Algorithm1,by skippinganykernel Xwhen a statement in Xis already in R. Next we define the semi-revision operator using trust. DEFINITIOn 4.4 Given a knowledge base K and formula , we define the operator?• such that: K?• = (K [{})\ (JUST(?, K [{})) It follows from this definition and our previous observation that ?• is a kernel semirevision operator; therefore, we obtain the following consequence: PROPOSITIOn 4.5 ?• satisfies thekernel semi-revision postulates. 5 Base Revision Algorithm The belief base semi-revision algorithm using the previously mentioned techniques is shown belowinTable2. Firstthe underlyingKBisexpandedwiththe update;iftheKBis inconsistent after the expansion, then all justifications for the inconsistency are found using the previously discussed approach for computing JUST forOWL-DL KBs.Following this, the trust incision function • is used to select the axioms and/or assertions to remove from the updated KB. Algorithm 2 BaseRevision(K,) Input: K: InitialSHOIN knowledge base : An addition update Output: K: Revised knowledge base 1: K • K + • 2: if K |= • then 3: kernels• JUST(?, K) 4: K • K \ (kernels) 5: end if 6: return K In section 2, we showed several techniques that improve the speed of DL reasoning to support the frequent updates of a syndication system. As we add this procedure for resolving inconsistencies,itis important thatitperforms as well as the other techniques so thatit does not become a bottleneck. Amain question of performance with this approach is related to efficiently computing all -kernels (i.e., computing all justifications for an entailment). In the naive implementation, Trust-BasedRevision for ExpressiveWeb Syndication 13 computing the minimal hitting sets [36] requires substantial number of consistencychecks; this is evident as the algorithm incrementally removes axioms and performs consistency checks at each node in the HST. However, our previous work on incremental consistency checking [29] improves the performance for finding -kernels in the same way it improves the performance of consistencychecks. Specifically, we store the completion graph generatedbythe tableau algorithmateverynodeoftheHSTtreeand incrementally modifyingthe graph forevery change made (axiom removed). This saves the time requiredinrechecking consistencyfrom scratch for each new node of the tree. Theother additionmadeinthisapproachistheprovenanceforeachstatement.Provenance, or the history of data, can be simple annotations or complex interconnections. In our case, we simply needa recordof the source and timestamp for each statement. While noOWL reasonershavebuiltinprovenance trackingat this point,itis straightforwardto store this information in an external data structure. For our purposes, a Java hash is sufficient and provides efficient (constant time) access. 6 Example Inthis section,a briefexampleofthe trust-basedrevision approachisprovided. First, assume that trustvalues rangeover the positive integers from1 to 10. Additionally, for simplicity assume that given an assertion , the trust function is defined as follows: source(source, )= +1 That is, the trust in • is simply the result of dividing the trust value for a given assertion by one plus the numberof time units sinceitwas published;note that the time sincepublication is incrementedby oneto ensuredivisionbya non-zero number. For ease of exposition, simply assume that the broker’s initial KB is empty. Additionally, let there be two publishers, P1 and P2, registered with a syndication broker, such that P1 isa highly trusted source with trustvalueof9. Further, P2 isafar less trust-worthypublisher and is therefore trusted with a value of 3. Now, say that at time 1, P1 publishes the assertion RiskyCompany(BauschAndLomb). Given that this is the only assertion in the KB at time 1, the KB is clearly consistent. Next assume that at time 2, publisher P2 publishes the assertion ¬RiskyCompany(BauschAndLomb), clearly resulting in an inconsistency. Using the previously described revision approach, the justifications (constituting thekernels) for K |= • willbe determined.Inthissimpleexample, thereisonly one justification composedofthetwoassertions.Next,the following trustvalues would be found for the assertions at time 2: RiskyCompany(BauschAndLomb) = 29 ¬RiskyCompany(BauschAndLomb) = 3 1 Given this, the assertion ¬RiskyCompany(BauschAndLomb) would be removed and consistency would be regained. 7 Related Work 7.1 Syndication Systems Thisoverview demonstratesthe recent trendtoward moreexpressive syndicationapproaches. 14 Trust-BasedRevision for ExpressiveWeb Syndication 7.1.1 Keywords and Attributes-ValuePairs Early syndication systems primarily reliedon subject-basedkeywordsin orderto match user interests with published documents/data [49, 59]. In such an approach, publishers associate some number of predefinedkeywords with publications, and similarly, subscription are represented usingkeywords. Therefore, matching publications with subscription requests therefore reduces tokeyword matching. The main limitation of such an approach is its simplistic useofkeyword matching. Following this, there were efforts to capture more detailed user interests by allowing attribute-value pairs to be associated with published content [1, 14, 10, 6, 7, 14]. In such an approach users are allowed to provide values for certain attributes, and matching reduces to determining the satisfaction of attribute values with associated publications. While this provides further filtering capabilities and more accurate dissemination, the approach is still limited by the predefined attributes and the simple matching of attribute values. In order to address the scalability of both of these two approaches, distributed architectures have been investigated (e.g., [5, 59]). For example, [59] presents the following approach: assume there are n distributed brokers and that published documents can be sent to a subset of these distributed brokers, denoted PB. Similarly,a subscriptionis assumedtoberegistered with some subset of the distributed brokers, denoted SB.Therefore, if PB • SB • • then it is guaranteed that matches will not be missed (this will always hold if PB + SB = n + 1) [59]. Using such an approach, users will obtain results as soon as the first broker processes it and the load is distributed. 7.1.2 XML Approaches Over the past few years there has been vast interest in utilizing XML for filtering purposes in syndication systems (e.g., see [3, 8, 25, 39, 13]). In such an approach, published documents/data are represented in XML and subscription requests are specified using an XML query/path language (e.g.,XPath [8]). This approach providesavarietyof benefitsincluding the enables the ability to enforce published content validation (using XML Schema) and provides more expressive subscription requests (via XML path query languages), etc. The popularity of such approaches is exemplified by the number of RSS 2.0 [42] and Atom 1.0 [48, 24] feeds (both of which are XML based), which are growing at ever increasing rates. Recently, there has been work in addressing the scalability of such approaches by proposing distributed XML-based syndication architectures (e.g., see [13, 60]). For example, in [13]the authorsinvestigateavarietyof distributiontechniques, including distributing queries based on query pattern exclusiveness. The general idea is to require different brokers to be responsible for different queries suchthat the probability that newly published content satisfies queries at anytwo brokers is low. For example, two queries that contain value-based predicates on the same attributebut withdifferent values are distributed to different brokers. [13] additionallyleverages content-driven routingto direct publicationsto distributed brokers which are potentially interested in the content (i.e., contain subscriptions which will likely match the publication). This is accomplished by maintaining query routing tables which summarize the interests (i.e., subscriptions maintained) of other brokers. Trust-BasedRevision for ExpressiveWeb Syndication 7.1.3 Semantic Approaches Given the limited expressivity of XML (and XML Schema) as a knowledge modeling language, there has been interest in using formal knowledge representation languages for representing published contents. One such approachis providedin theevent-based dissemination platform CREAM [10]; in this platform, the syndication model is attribute-value pair based, however attributes can be associated with semantic information described in an ontology. This allows the definition of concept hierarchies and therefore simple inferencing to determine subscription matches. Given the recent standardization of the knowledge representation language RDF (and RDFS), there has been increased interest in using RDF [40] for syndication purposes; RDF is even the underlying representation format of RSS 1.0. A variety of architectures have been proposed (e.g., [51, 52, 57]), all of which use RDF the representation language for publications. In such approaches, RDF graph-based query languages (typically triple patterns) are used to represent subscription requests and matching publications with subscriptions reduces to triple pattern matching. Additionally, in most approaches RDFS is also utilized to describe domain ontologies which the published RDF content adheres to. This allows simple semantic inferences (e.g., via subclass relationships) to be made over publications, similar to the approach adopted in CREAM. There has also been work on addressing the scalability of an RDF-based approaches by leveraging distributed syndication archictectures. For example, [9] present an distributed RDF publish/subscribe approach,in whichapeer-to-peer (P2P) architectureis utilized. Specifically, a super-peer [11, 47] architecture is proposed, where super-peers in the network are responsible transfering publications to the correct subscribers, which are regular peers in the network. Concept-Based Approaches. In[56,41]the authors useaDL-based approachforWeb service matching and information syndication respectively, in which DL concepts (possibly complex concepts) are used to represent both subscription requests as well as published documents/data. In such an approach, matching published content with subscription requests reduces to determining if published concepts and subscriptions are logically equivalent, subsume one another, or are not compatible (discussed below). More specifically, [41, 50] defines there to be a match between a subscription S and published document Dif one of the following holds (in order of match strength): – Exact (S • D): The subscription and the published concepts are equivalent concepts, and it is referred to as an Exact match. – PlugIn (S • D): The subscription is a sub-concept of the published concept, and it is referred to as a PlugIn match. – Subsume (D• S): The subscription is a super-concept of the published concept, and it is referred to as a Subsume match. – Intersection (¬(S • D v?)): The intersection of the subscription and the published concept is satisfiable, and it is referred to as an Intersection match. Matching subscription requests is therefore accomplished by two reasoning tasks; namely classifyingtheKBwheneither subscriptionrequestsornewdataisreceivedandbyperforming concept satisfiability tests for the intersection of each subscription and published concept. While empirical results demonstrate accepted performance times(20 ms) for matching new subscription requests with a fixed set of published documents, processing a large amount of 16 Trust-BasedRevision for ExpressiveWeb Syndication incoming published content is still problematic(10s of seconds) [56, 41]. This is due to the cost of repeatedly reclassifying the published concepts; this problem is compounded if syndication brokers have domain knowledge (potentially very large) with which newly published data must be integrated. Query-Based Approach. [26, 27] presents an agent-based document retrieval system (which is essentially a publish/subscribe application) in which published contents are represented as ABox assertions and subscription requests as a DL concept (viewed as an instance retrieval query). Therefore, matching is reduced to instance retrieval of the subscription concept. Given the performance issues of using such an approach (i.e., response times in the 10s of seconds), the authors introduce two optimizations for more effective incremental instance retrieval, both or which are discussed below: – Query Ordering: In query ordering, a partial ordering is induced upon all registered subscription concepts based on their subsumption relations; these subsumption relations are determinedbyclassifying the atomic subscription concepts. In the approach moregeneral subscriptions are answered first, thereby reducing the number of individuals that must be considered for more specific queries(due to the subsumption relation). – Candidate Individual Reduction: Candidate individual reduction is the process of not considering previous individuals which satisfied registered queries; that is, once an individualhas satisfiedthe subscription concept,itdoesnotneedtobe reconsiderswhennew data is published. This holds, due to the monotonicity of the DLs considered in the work and thefact that deletions are not supported. 7.1.4 Discussion Our work is based in using a more expressive mechanism for representing published contents. This allows the use of automated reasoning procedures to infer matches not found using syntactic approaches (keyword, attribute-value pair, and/or XML) and simpler semantic approaches (e.g., RDF/S). While there has been work on application scenarios which are relatedto DL-based syndication systems,the related techniques eithertakeadifferent approach for representing published contents and subscriptions requests (e.g., [56, 41]) or assume a simpler subscription format with only atomic concepts(e.g., [26, 27]). Further,in the syndicationframeworkusedinthiswork,we assumethe publicationsareencodedinOWL,which provides additional benefits. Another general distinction between the syndication framework used here and those presented above is that our approach allows for publications to persist at the syndication broker for varying time frames; this in turn allows composite subscription matches, in which the information contained in multiple publications comprises a publication match. 7.2 Belief Revision There have been numerous approaches investigated in literature for revising and updating logical knowledge bases. Recently, there have been attempts to apply these approaches to description logic knowledge bases. As discussedin section3, oneofthemain problemswiththeAGM modelof beliefrevision is related to the difficulty of of computing with belief sets. Given this, there has been substantial work on using belief bases as an alternative structure [44, 19, 31, 45, 46]. Belief Trust-BasedRevision for ExpressiveWeb Syndication 17 bases are not closed under logical consequence and are usually interpreted as basic beliefs from which additional beliefs (the belief set) can be derived. In [19, 32, 35] the traditional AGM change operators are defined in terms of belief bases. There has been recent work on applying traditional beliefbase revision algorithms to description logics. In [15], the author follows the base revision approach presented in [19] and again finds negative results, in that SHIF and SHOIN cannot satisfy the belief base revision postulates originally presented in [19]. Given these negative results, there has been recent interest in applying belief base semirevision [34] to DL KBs. Semi-revision differs with the traditional belief base revision model in that the added belief may or may not be accepted (this is because it may be later retracted in order to regain consistency). In literature, semi-revision has successfully been applied to propositionallogic.Forexample,[58] presentsan algorithmforbeliefbasesemi-revisionfor propositionallogic basedonthe construction presentedin[34],andthe authorshowshowthe diagnosisproblemas describedby[53]canbeusedtoprovidean semi-revision algorithmfor propositional logic. There has been recent work on applying semi-revision techniques to description logics. [54] presents two different constructions basedon semi-revision, bothof whichaimtoensure thethatthenewbeliefis entailedbytherevisedKB.Inthe first approach,itis guaranteedthat the new belief will be entailed by the knowledge base, unless that new belief is inconsistent. In the second construction, the new belief will always be entailed after revision, however if the new belief is inconsistent then the revised knowledge base is inconsistent as well. The main distinction with the approach presented in this article is that, while it is ensured that the KB is consistent after the revision, in our approach the new belief may not be entailed by the revised KB. 8 Conclusions and Future Work As interest in web syndication grows, and more applications begin to rely on syndicated data, there is an increased need for more expressive ways to describe content and subscriptions. Wehave createda syndication framework using the SemanticWeb languageOWL, and introduced a series of reasoning optimizations that allow a system to handle the rapid flow of information. This framework needed an efficient and effective method for resolving inconsistencies in the knowledge base. In this paper, we have presented a trust-based approach to beliefbaserevision,andshownitapplicabilitytoOWL-DLknowledge bases. There are several directions of future work in this project. We are in the process of evaluating our syndication system using real-time news feeds in the financial domain. These simulations will allow us to demonstrate the effectiveness and scalability of the entire system, including the belief base revisiontechniques presented here. There are also several trust questions we will address independently. The exact balance between source• and • is likely application specific. We plan to run experiments with our existing syndication datatodevelopa methodfor optimizing eachfactorin . Additionally, there are some questions to be investigated regarding the trust incision function , outlined in table 1. That algorithm will choose a set of statements to discard such that the KB will be consistent.However,thatsetisnot necessarily minimalor optimal.Forexample,it could be the case that one statement, sa is in every -kernel, and is the least trusted in some,but not all, -kernels. Depending on the ordering, • could end up selecting only s1 for removal, or s1 in addition to several other statements. It is unclear what an “optimal” set would be, 18 Trust-BasedRevision for ExpressiveWeb Syndication but there are certainly optimizations that can be made to the incision function. We plan to investigate this topic, with attention to trust, information in the knowledge base, as well as the complexity of the incision function. 9 Acknowledgments ThisworkwassupportedinpartbygrantsfromFujitsu, LockheedMartin,NTTCorp.,Kevric Corp.,SAIC,the National ScienceFoundation,the National Geospatial-IntelligenceAgency, DARPA, US Army Research Laboratory, and NIST. We would like to thank Aditya Kalyanpur, Yarden Katz, Vladimir Kolovski, and Bijan Parsia for their contributions to this work. References [1] Marcos Kawazoe Aguilera, Robert E. Strom, Daniel C. Sturman, Mark Astley, andTushar Deepak Chandra. Matchingeventsinacontent-based subscription system.In Symposium on Principles of Distributed Computing, 1999. [2] CarlosE. Alchourr´on, PeterG¨ardenfors, andDavid Makinson. On the logicof theory change:Partial meet contraction and revision functions. Journal of Symbolic Logic, 50(2):510–530, 1985. [3] Mehmet Altinel and Michael J. Franklin. Efficient filtering of XML documents for selective dissemination of information. In The VLDBJournal, 2000. [4] F. Baader and B. Hollunder. Embedding defaults into terminological representation systems. J.Automated Reasoning, 14:149–180, 1995. [5] Guruduth Banavar, Tushar Deepak Chandra, Bodhi Mukherjee, Jay Nagarajarao, Robert E. Strom, and Daniel C. Stur. An efficient multicast protocol for content-based publish-subscribe systems. In ICDCS ’99: Proceedings of the 19th IEEE International Conference on Distributed Computing Systems, page 262,Washington, DC, USA, 1999. IEEE Computer Society. [6] A. Carzaniga, M. Rutherford, and A.Wolf. A routing scheme for content-based networking. In Technical Report CU-CS-953-03, Departmentof Computer Science, Universityof Colorado,June 2003., 2003. [7]A. CarzanigaandA.Wolf.Forwardingina content-based network.In In SIGCOMM ’03, Karlsruhe, Germany, Aug., 2003. [8] CheeYong Chan,Pascal Felber, MinosN. Garofalakis, and Rajeev Rastogi.Efficient filtering of XML documents with XPath expressions. The VLDBJournal, 11:354–379, 2002. [9]Paul Alexandru Chirita, Stratos Idreos, ManolisKoubarakis, andWolfgang Nejdl. Publish/subscribe for rdfbased p2p networks. In InProceedingsof 1st European SemanticWeb Symposium., 2004. [10]M. Cilia,C. Bornhvd,andA.P. Buchmann. Cream:An infrastructurefor distributed, heterogeneous eventbased applications. In Proceedings of the International Conference on Cooperative Information Systems, 2003. [11] Arturo Crespo and Hector Garcia-Molina. Routing indices for peer-to-peer systems. In ICDCS ’02: Proceedings of the 22 nd International Conference on Distributed Computing Systems (ICDCS’02), page 23,Washington, DC, USA, 2002. IEEE Computer Society. [12] Morton Deutsch. The Resolution of Conflict. Yale University Press, New Haven, 1973. [13] Y. Diao, S. Rizvi, and M. Franklin. Towards an internet-scale xml dissemination service. In Proceedings of VLDB2004,August 2004., 2004. [14] Franc¸oiseFabret,H. Arno Jacobsen, Franc¸ois Llirbat,Jo˜ao Pereira,KennethA. Ross, and Dennis Shasha. Filtering algorithms and implementation forveryfast publish/subscribe systems. SIGMOD Record(ACM Special Interest Group on Management of Data), 30(2):115–126, 2001. [15] G. Flouris. On belief change and ontology evolution. In Ph.D. Dissertation, University of Crete, 2006. [16] G. Flouris, D. Plexousakis, and G. Antoniou. On applying the agm theory to dls and owl. In 4th International SemanticWeb Conference (ISWC 2005), 2005. [17] G. Flouris, D. Plexousakis, and G. Antoniou. Updating description logic using the agm theory. In 7th International Symposium onLogicalFormalizationsof Commonsense Reasoning, 2005. Trust-BasedRevision for ExpressiveWeb Syndication [18] Giorgos Flouris, Dimitris Plexousakis, and Grigoris Antoniou. Generalizing the agm postulates: Preliminary results and applications. In Proceedings of the 10th International Workshop on Non-Monotonic Reasoning (NMR 2004), Whistler, Canada, June 2004. [19] Andre Furmann. Theory contraction through base contraction. Journal of Philosophical Logic, 20:175–203, 1991. [20] Jennifer Golbeck. Computing and ApplyingTrust in Web-based Social Networks. PhD thesis, University of Maryland, CollegePark, MD, USA, April 2005. [21] Jennifer Golbeck. Generating predictive movie recommendations from trust in social networks. In Proceedings of theFourth International Conference onTrust Management, 2006. [22] Jennifer Golbeck. Trust and nuanced profile similarity in online social networks. In MINDSWAPTechnical Report TR-MS1284, 2006. [23] RobertT. Golembiewskiand Mark McConkie. The centralityof interpersonal trustin groupprocesses. InCary Cooper, editor, Theories of Group Processes.Wiley, Hoboken, NJ, 1975. [24] J. Gregorio and B. de hra. The atom publishing protocol. In IETF Internet Draft, 2005. [25] AshishKumar Gupta and Dan Suciu. Stream processing of xpath queries withpredicates. In SIGMOD ’03: Proceedings of the 2003 ACM SIGMOD international conference on Management of data, pages 419–430, NewYork,NY, USA, 2003.ACM Press. [26] V. Haarslev and R. Moller. Description logic systems with concrete domains: Applications for the semantic web. In In Int.Workshop onKR meets Databases, 2003., 2003. [27]V. Haarslev andR.M¨oller. Incremental query answering for implementing document retrieval services. In Proc.of the Int.Workshop on DescriptionLogics, 2003. [28] Christian Halaschek-Weiner and James Hendler. Toward expressive syndication on the web. In Proceedings of the 16thWorldWideWeb Conference, 2007. [29] Christian Halaschek-Wiener, BijanParsia, and Evren Sirin. Description logic reasoning with syntactic updates. In Proc. of the Int. Conf. on Ontologies, Databases, and Applications of Semantics, 2006. [30] F. Christian Halaschek-Wiener. Expressive Syndication on the Web Using a Description Logic Based Approach. PhD thesis, University of Maryland, College Park, 2007. http://www.mindswap.org/chris/publications/FCHW-Thesis.pdf. [31] Sven Ove Hansson. New operators for theory change. Theoria, 55:114–133, 1989. [32] Sven Ove Hansson. Belief base dynamics. In PhD Theis, Uppsala University. Uppsala University, 1991. [33] Sven Ove Hansson. Kernel contraction. Journal of Symbolic Logic, 59(3):845–859, 1994. [34] Sven Ove Hansson. Semi-revision. Journal of Applied Non-Classical Logics, 7(2), 1997. [35] Sven Ove Hansson. ATextbook on Belief Dynamics. Kluwer Academic Press, 1999. [36] Aditya Kalyanpur. Debugging and repair of owl ontologies. In Ph.D. Dissertation, University of Maryland, CollegePark, 2006. http://www.mindswap.org/papers/2006/AdityaThesis-DebuggingOWL.pdf. [37] Yarden Katz and Jennifer Golbeck. Social network-based trust in prioritized default logic. Proceedings of the Twenty-First National Conference onArtificial Intelligence (AAAI-06), 2006. [38] UgurKuter and Jennifer Golbeck. Sunny:A new algorithm for trust inferencein social networks, using probabilistic confidence models. In Proceedings of the National Conference on Artificial Intelligence (AAAI), 2007. [39] LaksV.S. Lakshmanan and SailajaParthasarathy. Onefficient matching of streaming XML documents and queries. In Extending DatabaseTechnology, pages 142–160, 2002. [40] O. Lassila and R.R. Swick. Resource description framework (rdf) model and syntax specification. w3c recommendation, www consortium (cambridge, ma). February 1999. [41]L.LiandI.Horrocks.Asoftwareframeworkfor matchmakingbasedon semanticweb technology.In Proceedingsof the 12th InternationalWorldWideWeb Conference, 2003. [42] D. Libby. Rss 0.91 spec, revision 3. In Netscape Comm., 1999. [43] H. Liu, C. Lutz, M. Milicic, andF.Wolter. Updating description logic aboxes. In International Conference of Principles of Knowledge Representation and Reasoning(KR), 2006. [44] Bernhard Nebel.Aknowledgelevel analysisof beliefrevision.InR. Brachman,H.J.Levesque,andR. Reiter, editors, Principles of Knowledge Representation and Reasoning: Proceedings of the 1st International Conference, pages 301–311, San Mateo, 1989. Morgan Kaufmann. [45] Bernhard Nebel. Syntax-based approaches to belief revision. InP.G¨ardenfors, editor, Belief Revision, volume 29, pages 52–88. Cambridge University Press, Cambridge, UK, 1992. Trust-BasedRevision for ExpressiveWeb Syndication [46] BernhardNebel.Howhardisittoreviseabeliefbase?InDidierDuboisandHenriPrade,editors, Handbook of Defeasible Reasoningand UncertaintyManagement Systems,Volume3: BeliefChange, pages 77–145. Kluwer Academic Publishers, Dordrecht, 1998. [47]Wolfgang Nejdl, MartinWolpers,Wolf Siberski, Christoph Schmitz, Mario Schlosser, Ingo Brunkhorst, and Alexander Loser. Super-peer-based routing and clustering strategies for rdf-based peer-to-peer networks. In Proceedingsof the 12th InternationalWorldWideWeb Conference, 2003. [48] M. Nottingham and R. Sayre. The atom syndication format. In IETF Internet Draft, 2005. [49]B.Oki,M.Pfluegl,andDaleSkeen. The informationbus:An architectureforextensible distributed systems. In In Proc. 14th SOSP, 1993. [50] MassimoPaolucci,TakahiroKawamura,TerryR.Payne,and Katia Sycara. Semantic matchingofweb services capabilities. In TheFirst International SemanticWeb Conference, 2002. [51] MilenkoPetrovic, Ioana Burcea, and Hans-Arno Jacobsen. S-topss: Semantic toronto publish/subscribe system. In VLDB’03:Proceedingsofthe29th international conferenceonVerylargedatabases, 2003. [52] MilenkoPetrovic, Haifeng Liu, and Hans-Arno Jacobsen. Cms-topss:Efficient dissemination of rss documents. In VLDB ’05: Proceedings of the 31st international conference onVery large data bases, pages 1279–1282. VLDB Endowment, 2005. [53] RReiter. Atheory of diagnosis from first principles. Artif. Intell., 32(1):57–95, 1987. [54] Marcio Moretto Ribeiro and RenataWasserman. Base revision in description logics -preliminary results. In Proc.oftheInt.Workshopon Ontology Dynamics(IWOD2007), 2007. [55] Piotr Sztompka. Trust:ASociological Theory. Cambridge University Press, Cambridge, 1999. [56] Michael Uschold, Peter Clark, Fred Dickey, CaseyFung, Sonia Smith, Stephen Uczekaj MichaelWilke, Sean Bechhofer, and Ian Horrocks. Asemantic infosphere. In Proc.of the Int. SemanticWeb Conference, 2003. [57] JinlingWang, Beihong Jin, and Jing Li. An ontology-based publish/subscribe system. In Middleware, 2004. [58] R.Wassermann. An algorithm for belief revision. In Proceedings of the Seventh International Conference on Principles of Knowledge Representation and Reasoning (KR2000), 2000. [59]TakW.Yan and Hector Garcia-Molina. The SIFT information dissemination system. ACMTransactions on Database Systems, 24(4):529–565, 1999. [60] EikoYoneki and Jean Bacon. Distributed multicast grouping for publish/subscribeover mobileadhoc networks. In Wireless Communications and Networking Conference, pages 2293–2299, 2005. [61] Cai-Nicolas Ziegler andJennifer Golbeck. Investigating Correlations of Trust and Interest Similarity. Decision Support Services, page 1, 2006. 